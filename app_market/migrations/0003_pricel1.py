# Generated by Django 5.2.6 on 2025-10-14 18:00

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app_market', '0002_exchange_description_alter_exchange_provider'),
    ]

    operations = [
        migrations.CreateModel(
            name='PriceL1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('venue_type', models.CharField(choices=[('CEX', 'Криптобиржа (CEX)'), ('DEX', 'Децентрализованная биржа (DEX)'), ('PSP', 'Платёжный провайдер / фиат'), ('OTC', 'OTC / ручная котировка'), ('MANUAL', 'Ручной источник')], help_text='CEX/DEX/PSP/OTC/MANUAL — для аналитики и SLA по свежести.', max_length=10, verbose_name='Тип площадки')),
                ('src_symbol', models.CharField(help_text='Напр. BTCUSDT, BTC-USD, pool_id для DEX.', max_length=64, verbose_name='Исходный символ у ПЛ')),
                ('src_base_code', models.CharField(help_text='Ticker/contract у провайдера. Для DEX — адрес токена.', max_length=32, verbose_name='Исходный код базового')),
                ('src_quote_code', models.CharField(help_text='Ticker/contract у провайдера. Для DEX — адрес токена.', max_length=32, verbose_name='Исходный код котируемого')),
                ('bid', models.DecimalField(decimal_places=18, help_text='Лучшая цена, по которой мы МОЖЕМ продать базовый актив (клиент покупает).', max_digits=38, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Bid')),
                ('ask', models.DecimalField(decimal_places=18, help_text='Лучшая цена, по которой мы МОЖЕМ купить базовый актив (клиент продаёт).', max_digits=38, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Ask')),
                ('last', models.DecimalField(blank=True, decimal_places=18, help_text='Последняя сделка у источника, если доступно.', max_digits=38, null=True, verbose_name='Last')),
                ('fee_taker_bps', models.PositiveIntegerField(default=0, help_text='Торговая комиссия taker в базисных пунктах; может уточняться при расчёте.', verbose_name='Taker комиссия, bps')),
                ('fee_maker_bps', models.PositiveIntegerField(default=0, help_text='Необязательная, если используем лимитные стратегии.', verbose_name='Maker комиссия, bps')),
                ('ts_src', models.DateTimeField(help_text='Timestamp, который пришёл от ПЛ (сервер источника).', verbose_name='Время у источника')),
                ('ts_ingest', models.DateTimeField(default=django.utils.timezone.now, help_text='Когда наша система приняла и нормализовала котировку.', verbose_name='Время приёма')),
                ('seq', models.BigIntegerField(blank=True, help_text='Для WS/стримов (last_update_id, trade_id и т.п.), если доступно.', null=True, verbose_name='Последовательность/offset')),
                ('latency_ms', models.PositiveIntegerField(default=0, help_text='Оценка (ingest - ts_src) в миллисекундах.', verbose_name='Задержка, мс')),
                ('status', models.CharField(choices=[('OK', 'ОК'), ('STALE', 'Устарела'), ('DEGRADED', 'Деградация качества')], default='OK', help_text='OK/STALE/DEGRADED по SLA свежести и валидациям.', max_length=12, verbose_name='Статус')),
                ('quality_note', models.CharField(blank=True, help_text='Почему деградация/устаревание, если есть.', max_length=255, null=True, verbose_name='Комментарий к качеству')),
                ('extras', models.JSONField(blank=True, default=dict, help_text='Сырые поля источника: best sizes, quoteId, pool reserves и т.п.', verbose_name='Доп. данные')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('base_asset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prices_l1_base', to='app_market.exchangeasset', verbose_name='Базовый актив')),
                ('provider', models.ForeignKey(help_text='Связь на Exchange (ПЛ).', on_delete=django.db.models.deletion.PROTECT, related_name='prices_l1', to='app_market.exchange', verbose_name='Поставщик ликвидности')),
                ('quote_asset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prices_l1_quote', to='app_market.exchangeasset', verbose_name='Котируемый актив')),
            ],
            options={
                'verbose_name': 'L1-котировка (bid/ask)',
                'verbose_name_plural': 'L1-котировки (bid/ask)',
                'db_table': 'market_price_l1',
                'indexes': [models.Index(fields=['provider', 'base_asset', 'quote_asset', '-ts_src'], name='idx_price_l1_src'), models.Index(fields=['venue_type', 'base_asset', 'quote_asset', '-ts_src'], name='idx_price_l1_venue'), models.Index(fields=['status', '-ts_ingest'], name='idx_price_l1_status')],
                'constraints': [models.CheckConstraint(condition=models.Q(('ask__gte', models.F('bid'))), name='price_l1_ask_ge_bid'), models.CheckConstraint(condition=models.Q(('bid__gte', 0), ('ask__gte', 0)), name='price_l1_non_negative')],
            },
        ),
    ]
