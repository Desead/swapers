# Generated by Django 5.2.6 on 2025-10-02 20:55

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app_market', '0012_alter_exchange_exchange_kind_alter_exchange_provider_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='exchangeapikey',
            options={'ordering': ['exchange', 'label'], 'verbose_name': 'API ключи биржи', 'verbose_name_plural': 'API ключи бирж'},
        ),
        migrations.AlterField(
            model_name='exchange',
            name='can_send',
            field=models.BooleanField(default=True, verbose_name='Вывод средств'),
        ),
        migrations.AlterField(
            model_name='exchange',
            name='provider',
            field=models.CharField(choices=[('KUCOIN', 'KuCoin'), ('WHITEBIT', 'WhiteBIT'), ('BYBIT', 'ByBit'), ('RAPIRA', 'Rapira'), ('MEXC', 'MEXC'), ('BINANCE', 'Binance'), ('COINBASE_EXCHANGE', 'Coinbase Exchange'), ('UPBIT', 'Upbit'), ('BITSTAMP', 'Bitstamp'), ('BINGX', 'BingX'), ('BITFINEX', 'Bitfinex'), ('HTX', 'HTX'), ('GATEIO', 'Gate.io'), ('BITGET', 'Bitget'), ('OKX', 'OKX'), ('GEMINI', 'Gemini'), ('LBANK', 'LBank'), ('UNISWAP', 'Uniswap'), ('PANCAKESWAP', 'PancakeSwap'), ('PAYPAL', 'PayPal'), ('ADVCASH', 'Advanced Cash'), ('FIREKASSA', 'FireKassa'), ('APIRONE', 'Apirone'), ('CHANGENOW', 'ChangeNOW'), ('CHANGELLY', 'Changelly'), ('FIXEDFLOAT', 'ff.io'), ('QUICKEX', 'Quickex'), ('ALFABIT', 'Alfabit'), ('WESTWALLET', 'WestWallet'), ('TRUSTWALLET', 'Trust Wallet'), ('TRONWALLET', 'Tron Wallet'), ('ANTARCTICWALLET', 'Antarctic Wallet'), ('TELEGRAM_WALLET', 'Telegram Wallet'), ('BTC_NODE', 'BTC Node'), ('XMR_NODE', 'XMR Node'), ('USDT_NODE', 'USDT Node'), ('USDC_NODE', 'USDC Node'), ('DASH_NODE', 'DASH Node'), ('SBERBANK', 'Сбербанк'), ('TBANK', 'ТБанк'), ('ALFABANK', 'Альфабанк'), ('VTB', 'ВТБ банк'), ('MANUAL', 'Manual')], db_index=True, default='MANUAL', max_length=32, unique=True, verbose_name='Название'),
        ),
        migrations.AlterField(
            model_name='exchangeapikey',
            name='exchange',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to='app_market.exchange', verbose_name='Поставщик'),
        ),
        migrations.AlterField(
            model_name='exchangeapikey',
            name='is_enabled',
            field=models.BooleanField(db_index=True, default=True, verbose_name='Включён'),
        ),
        migrations.CreateModel(
            name='CurrencyMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_symbol', models.CharField(db_index=True, max_length=128, verbose_name='raw_symbol')),
                ('raw_chain', models.CharField(blank=True, max_length=128, null=True, verbose_name='raw_chain')),
                ('raw_pair', models.CharField(blank=True, max_length=128, null=True, verbose_name='raw_pair')),
                ('match_kind', models.CharField(choices=[('EXACT', 'Exact'), ('REGEX', 'Regex'), ('SPLIT', 'Split'), ('CUSTOM', 'Custom')], db_index=True, default='EXACT', max_length=10)),
                ('priority', models.IntegerField(db_index=True, default=0, verbose_name='Приоритет')),
                ('pattern', models.CharField(blank=True, default='', max_length=256, verbose_name='pattern/regex')),
                ('asset_group_idx', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='asset group index')),
                ('chain_group_idx', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='chain group index')),
                ('split_delimiters', models.CharField(blank=True, default='', max_length=16, verbose_name='split delimiters (e.g. -/\\)')),
                ('left_is_asset', models.BooleanField(default=True, verbose_name='Левая часть — это asset (для SPLIT)')),
                ('norm_asset_code', models.CharField(max_length=32, verbose_name='asset_code (norm)')),
                ('norm_chain_code', models.CharField(max_length=64, verbose_name='chain_code (norm)')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Активно')),
                ('note', models.CharField(blank=True, default='', max_length=255, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='currency_maps', to='app_market.exchange', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'Маппинг обозначений валют',
                'verbose_name_plural': 'Маппинги обозначений валют',
                'ordering': ['exchange', '-priority', 'raw_symbol'],
                'indexes': [models.Index(fields=['exchange', 'raw_symbol'], name='app_market__exchang_1eac41_idx'), models.Index(fields=['exchange', 'is_active', '-priority'], name='app_market__exchang_207bb8_idx')],
            },
        ),
        migrations.CreateModel(
            name='ExchangeAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_code', models.CharField(db_index=True, max_length=32, verbose_name='Asset code (e.g. BTC, USDT)')),
                ('asset_name', models.CharField(blank=True, default='', max_length=128, verbose_name='Asset name (e.g. Bitcoin, Tether USD)')),
                ('chain_code', models.CharField(db_index=True, max_length=64, verbose_name='Chain/rail code (e.g. BTC, TRC20, ERC20, SEPA, SBERBANK)')),
                ('chain_display', models.CharField(blank=True, default='', max_length=128, verbose_name='Chain display (e.g. TRC-20, ERC-20, Сбербанк)')),
                ('api_slug', models.CharField(blank=True, default='', help_text='Если оставить пустым — заполнится автоматически из ASSET_CHAIN.', max_length=128, verbose_name='API-метка (например USDT_TRC20)')),
                ('D', models.BooleanField(default=True, verbose_name='Ввод разрешён (ручной)')),
                ('W', models.BooleanField(default=True, verbose_name='Вывод разрешён (ручной)')),
                ('AD', models.BooleanField(default=True, verbose_name='Ввод доступен (авто)')),
                ('AW', models.BooleanField(default=True, verbose_name='Вывод доступен (авто)')),
                ('confirmations_deposit', models.PositiveIntegerField(default=0, verbose_name='Подтверждений для ввода')),
                ('confirmations_withdraw', models.PositiveIntegerField(default=0, verbose_name='Подтверждений для вывода')),
                ('deposit_fee_percent', models.DecimalField(decimal_places=5, default=Decimal('0'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Комиссия ввода, % (0=нет)')),
                ('deposit_fee_fixed', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Комиссия ввода, фикс (0=нет)')),
                ('deposit_min', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. ввод (0=нет)')),
                ('deposit_max', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. ввод (0=нет)')),
                ('deposit_min_usdt', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. ввод (в USDT, 0=нет)')),
                ('deposit_max_usdt', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. ввод (в USDT, 0=нет)')),
                ('withdraw_fee_percent', models.DecimalField(decimal_places=5, default=Decimal('0'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Комиссия вывода, % (0=нет)')),
                ('withdraw_fee_fixed', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Комиссия вывода, фикс (0=нет)')),
                ('withdraw_min', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. вывод (0=нет)')),
                ('withdraw_max', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. вывод (0=нет)')),
                ('withdraw_min_usdt', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. вывод (в USDT, 0=нет)')),
                ('withdraw_max_usdt', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. вывод (в USDT, 0=нет)')),
                ('asset_kind', models.CharField(choices=[('CRYPTO', 'Crypto'), ('FIAT', 'Fiat'), ('PSP_MONEY', 'PSP money'), ('CASH', 'Cash')], db_index=True, default='CRYPTO', max_length=16, verbose_name='Тип актива')),
                ('amount_precision', models.PositiveSmallIntegerField(default=8, verbose_name='Точность, знаков после запятой')),
                ('nominal', models.DecimalField(decimal_places=10, default=Decimal('1'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('1E-10'))], verbose_name='Номинал (по умолчанию 1)')),
                ('reserve_current', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Текущий резерв')),
                ('reserve_min', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. резерв (0=нет)')),
                ('reserve_max', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. резерв (0=нет)')),
                ('requires_memo', models.BooleanField(default=False, verbose_name='Требуется MEMO/TAG')),
                ('memo_hint', models.CharField(blank=True, default='', max_length=128, verbose_name='Подсказка по MEMO')),
                ('is_stablecoin', models.BooleanField(default=False, verbose_name='Стейблкоин')),
                ('icon_file', models.ImageField(blank=True, null=True, upload_to='asset_icons/', verbose_name='Иконка (файл)')),
                ('icon_url', models.URLField(blank=True, default='', verbose_name='Иконка (URL)')),
                ('provider_symbol', models.CharField(blank=True, default='', max_length=128, verbose_name='Provider symbol')),
                ('provider_chain', models.CharField(blank=True, default='', max_length=128, verbose_name='Provider chain')),
                ('status_note', models.CharField(blank=True, default='', max_length=255, verbose_name='Комментарий к статусу')),
                ('raw_metadata', models.JSONField(blank=True, default=dict, verbose_name='Сырое описание от ПЛ')),
                ('last_synced_at', models.DateTimeField(blank=True, null=True, verbose_name='Последняя синхронизация')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='app_market.exchange', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'Актив ПЛ (монета+сеть)',
                'verbose_name_plural': 'Активы ПЛ (монета+сеть)',
                'ordering': ['exchange', 'asset_code', 'chain_code'],
                'indexes': [models.Index(fields=['exchange', 'asset_code'], name='app_market__exchang_2c700c_idx'), models.Index(fields=['exchange', 'chain_code'], name='app_market__exchang_99765a_idx'), models.Index(fields=['-updated_at'], name='app_market__updated_4535d3_idx')],
                'constraints': [models.UniqueConstraint(fields=('exchange', 'asset_code', 'chain_code'), name='uniq_exchange_asset_chain')],
            },
        ),
    ]
