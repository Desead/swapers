# Generated by Django 5.2.6 on 2025-10-15 13:32

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('KUCOIN', 'KuCoin'), ('WHITEBIT', 'WhiteBIT'), ('BYBIT', 'ByBit'), ('HTX', 'HTX'), ('MEXC', 'MEXC'), ('RAPIRA', 'Rapira'), ('BINANCE', 'Binance'), ('COINBASE_EXCHANGE', 'Coinbase Exchange'), ('UPBIT', 'Upbit'), ('BITSTAMP', 'Bitstamp'), ('BINGX', 'BingX'), ('BITFINEX', 'Bitfinex'), ('GATEIO', 'Gate.io'), ('BITGET', 'Bitget'), ('OKX', 'OKX'), ('GEMINI', 'Gemini'), ('LBANK', 'LBank'), ('UNISWAP', 'Uniswap'), ('PANCAKESWAP', 'PancakeSwap'), ('PAYPAL', 'PayPal'), ('ADVCASH', 'Advanced Cash'), ('FIREKASSA', 'FireKassa'), ('APIRONE', 'Apirone'), ('CHANGENOW', 'ChangeNOW'), ('CHANGELLY', 'Changelly'), ('FIXEDFLOAT', 'ff.io'), ('QUICKEX', 'Quickex'), ('ALFABIT', 'Alfabit'), ('WESTWALLET', 'WestWallet'), ('TRUSTWALLET', 'Trust Wallet'), ('TRONWALLET', 'Tron Wallet'), ('ANTARCTICWALLET', 'Antarctic Wallet'), ('TELEGRAM_WALLET', 'Telegram Wallet'), ('BTC_NODE', 'BTC Node'), ('XMR_NODE', 'XMR Node'), ('USDT_NODE', 'USDT Node'), ('USDC_NODE', 'USDC Node'), ('DASH_NODE', 'DASH Node'), ('SBERBANK', 'Сбербанк'), ('TBANK', 'ТБанк'), ('ALFABANK', 'Альфабанк'), ('VTB', 'ВТБ банк'), ('CASH', 'Наличные'), ('TWELVEDATA', 'Twelve Data'), ('OpExRate', 'Open Exchange Rates')], db_index=True, default='CASH', max_length=32, unique=True, verbose_name='Название')),
                ('exchange_kind', models.CharField(choices=[('CEX', 'Классическая биржа (CEX)'), ('DEX', 'Децентрализованная биржа (DEX)'), ('PSP', 'Платёжная система (PSP)'), ('WALLET', 'Кошелёк'), ('NODE', 'Нода'), ('EXCHANGER', 'Обменники'), ('BANK', 'Банк'), ('CASH', 'Наличные (касса)')], db_index=True, default='CEX', editable=False, help_text='Устанавливается автоматически', max_length=10, verbose_name='Тип')),
                ('is_available', models.BooleanField(db_index=True, default=True, editable=False, help_text='Изменяется автоматически (health-check, статусы API).', verbose_name='Доступен')),
                ('can_receive', models.BooleanField(default=True, verbose_name='Приём средств')),
                ('can_send', models.BooleanField(default=True, verbose_name='Вывод средств')),
                ('stablecoin', models.CharField(default='USDT', help_text='Стейблкоин для расчётов, например: USDT.', max_length=20, verbose_name='Рабочий стейблкоин')),
                ('spot_taker_fee', models.DecimalField(decimal_places=5, default=Decimal('0.1'), help_text='Может быть отрицательной.', max_digits=12, validators=[django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Спот: тейкер, %')),
                ('spot_maker_fee', models.DecimalField(decimal_places=5, default=Decimal('0.1'), help_text='Может быть отрицательной.', max_digits=12, validators=[django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Спот: мейкер, %')),
                ('futures_taker_fee', models.DecimalField(decimal_places=5, default=Decimal('0.1'), help_text='Может быть отрицательной.', max_digits=12, validators=[django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Фьючерсы: тейкер, %')),
                ('futures_maker_fee', models.DecimalField(decimal_places=5, default=Decimal('0.1'), help_text='Может быть отрицательной.', max_digits=12, validators=[django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Фьючерсы: мейкер, %')),
                ('fee_deposit_percent', models.DecimalField(decimal_places=5, default=Decimal('0'), max_digits=12, validators=[django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Ввод: %')),
                ('fee_deposit_fixed', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, verbose_name='Ввод: фикс')),
                ('fee_deposit_min', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Ввод: мин. комиссия')),
                ('fee_deposit_max', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Ввод: макс. комиссия')),
                ('fee_withdraw_percent', models.DecimalField(decimal_places=5, default=Decimal('0'), max_digits=12, validators=[django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Вывод: %')),
                ('fee_withdraw_fixed', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, verbose_name='Вывод: фикс')),
                ('fee_withdraw_min', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Вывод: мин. комиссия')),
                ('fee_withdraw_max', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Вывод: макс. комиссия')),
                ('show_prices_on_home', models.BooleanField(db_index=True, default=False, verbose_name='Цены')),
                ('webhook_endpoint', models.URLField(blank=True, default='', verbose_name='Webhook endpoint')),
                ('description', models.TextField(blank=True, default='небольшой комментарий о провайдере', null=True, verbose_name='Описание ')),
            ],
            options={
                'verbose_name': 'Поставщик ликвидности',
                'verbose_name_plural': 'Поставщики ликвидности',
                'ordering': ['provider'],
            },
        ),
        migrations.CreateModel(
            name='ExchangeAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_code', models.CharField(db_index=True, editable=False, max_length=32, verbose_name='Тикет')),
                ('asset_name', models.CharField(blank=True, default='', editable=False, max_length=128, verbose_name='Название')),
                ('chain_code', models.CharField(db_index=True, editable=False, max_length=64, verbose_name='Сеть')),
                ('chain_name', models.CharField(blank=True, default='', editable=False, max_length=128, verbose_name='Сеть название')),
                ('D', models.BooleanField(default=True, verbose_name='Ввод (ручной)')),
                ('W', models.BooleanField(default=True, verbose_name='Вывод (ручной)')),
                ('AD', models.BooleanField(default=True, verbose_name='Ввод (авто)')),
                ('AW', models.BooleanField(default=True, verbose_name='Вывод (авто)')),
                ('confirmations_deposit', models.PositiveIntegerField(default=0, verbose_name='Подтверждений для ввода')),
                ('confirmations_withdraw', models.PositiveIntegerField(default=0, verbose_name='Подтверждений для вывода')),
                ('deposit_fee_percent', models.DecimalField(decimal_places=5, default=Decimal('0'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Комиссия ввода, %')),
                ('deposit_fee_fixed', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Комиссия ввода, фикс')),
                ('deposit_min', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. ввод')),
                ('deposit_max', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. ввод')),
                ('deposit_min_usdt', models.DecimalField(decimal_places=10, default=Decimal('5'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. ввод (в USDT)')),
                ('deposit_max_usdt', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. ввод (в USDT)')),
                ('withdraw_fee_percent', models.DecimalField(decimal_places=5, default=Decimal('0'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Комиссия вывода, %')),
                ('withdraw_fee_fixed', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Комиссия вывода, фикс')),
                ('withdraw_min', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. вывод')),
                ('withdraw_max', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. вывод')),
                ('withdraw_min_usdt', models.DecimalField(decimal_places=10, default=Decimal('5'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. вывод (в USDT)')),
                ('withdraw_max_usdt', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. вывод (в USDT)')),
                ('asset_kind', models.CharField(choices=[('CRYPTO', 'Крипта'), ('FIAT', 'Фиат'), ('PSP_MONEY', 'Платёжка'), ('CASH', 'Наличные'), ('NOTDEFINED', 'Не определён')], db_index=True, default='CRYPTO', max_length=16, verbose_name='Тип актива')),
                ('amount_precision', models.PositiveSmallIntegerField(default=8, verbose_name='Точность актива')),
                ('amount_precision_display', models.PositiveSmallIntegerField(default=5, verbose_name='Точность на экране')),
                ('nominal', models.PositiveIntegerField(default=1, verbose_name='Номинал')),
                ('reserve_current', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Текущий резерв')),
                ('reserve_min', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Мин. резерв')),
                ('reserve_max', models.DecimalField(decimal_places=10, default=Decimal('0'), max_digits=28, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Макс. резерв')),
                ('requires_memo', models.BooleanField(default=False, verbose_name='MEMO')),
                ('is_stablecoin', models.BooleanField(default=False, verbose_name='Стейблкоин')),
                ('icon_file', models.ImageField(blank=True, null=True, upload_to='asset_icons/', verbose_name='Иконка (файл)')),
                ('icon_url', models.URLField(blank=True, default='', verbose_name='Иконка (URL)')),
                ('provider_symbol', models.CharField(blank=True, default='', max_length=128, verbose_name='Provider symbol')),
                ('provider_chain', models.CharField(blank=True, default='', max_length=128, verbose_name='Provider chain')),
                ('status_note', models.CharField(blank=True, default='', max_length=255, verbose_name='Комментарий к статусу')),
                ('raw_metadata', models.JSONField(blank=True, default=dict, verbose_name='Сырое описание от ПЛ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='app_market.exchange', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'Актив ПЛ',
                'verbose_name_plural': 'Активы ПЛ',
                'ordering': ['exchange', 'asset_code', 'chain_code'],
            },
        ),
        migrations.CreateModel(
            name='ExchangeAvailabilityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Время проверки')),
                ('available', models.BooleanField(verbose_name='Доступен')),
                ('code', models.CharField(max_length=32, verbose_name='Код результата')),
                ('detail', models.CharField(blank=True, default='', max_length=512, verbose_name='Детали')),
                ('latency_ms', models.PositiveIntegerField(default=0, verbose_name='Задержка, мс')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_logs', to='app_market.exchange', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'История доступности',
                'verbose_name_plural': 'История доступности',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PriceL1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('venue_type', models.CharField(choices=[('CEX', 'Криптобиржа (CEX)'), ('DEX', 'Децентрализованная биржа (DEX)'), ('PSP', 'Платёжный провайдер / фиат'), ('OTC', 'OTC / ручная котировка'), ('MANUAL', 'Ручной источник')], help_text='CEX/DEX/PSP/OTC/MANUAL — для аналитики и SLA по свежести.', max_length=10, verbose_name='Тип площадки')),
                ('src_symbol', models.CharField(help_text='Напр. BTCUSDT, BTC-USD, pool_id для DEX.', max_length=64, verbose_name='Исходный символ у ПЛ')),
                ('src_base_code', models.CharField(help_text='Ticker/contract у провайдера. Для DEX — адрес токена.', max_length=32, verbose_name='Исходный код базового')),
                ('src_quote_code', models.CharField(help_text='Ticker/contract у провайдера. Для DEX — адрес токена.', max_length=32, verbose_name='Исходный код котируемого')),
                ('bid', models.DecimalField(decimal_places=18, help_text='Лучшая цена, по которой мы МОЖЕМ продать базовый актив (клиент покупает).', max_digits=38, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Bid')),
                ('ask', models.DecimalField(decimal_places=18, help_text='Лучшая цена, по которой мы МОЖЕМ купить базовый актив (клиент продаёт).', max_digits=38, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Ask')),
                ('last', models.DecimalField(blank=True, decimal_places=18, help_text='Последняя сделка у источника, если доступно.', max_digits=38, null=True, verbose_name='Last')),
                ('fee_taker_bps', models.PositiveIntegerField(default=0, help_text='Торговая комиссия taker в базисных пунктах; может уточняться при расчёте.', verbose_name='Taker комиссия, bps')),
                ('fee_maker_bps', models.PositiveIntegerField(default=0, help_text='Необязательная, если используем лимитные стратегии.', verbose_name='Maker комиссия, bps')),
                ('ts_src', models.DateTimeField(help_text='Timestamp, который пришёл от ПЛ (сервер источника).', verbose_name='Время у источника')),
                ('ts_ingest', models.DateTimeField(default=django.utils.timezone.now, help_text='Когда наша система приняла и нормализовала котировку.', verbose_name='Время приёма')),
                ('seq', models.BigIntegerField(blank=True, help_text='Для WS/стримов (last_update_id, trade_id и т.п.), если доступно.', null=True, verbose_name='Последовательность/offset')),
                ('latency_ms', models.PositiveIntegerField(default=0, help_text='Оценка (ingest - ts_src) в миллисекундах.', verbose_name='Задержка, мс')),
                ('status', models.CharField(choices=[('OK', 'ОК'), ('STALE', 'Устарела'), ('DEGRADED', 'Деградация качества')], default='OK', help_text='OK/STALE/DEGRADED по SLA свежести и валидациям.', max_length=12, verbose_name='Статус')),
                ('quality_note', models.CharField(blank=True, help_text='Почему деградация/устаревание, если есть.', max_length=255, null=True, verbose_name='Комментарий к качеству')),
                ('extras', models.JSONField(blank=True, default=dict, help_text='Сырые поля источника: best sizes, quoteId, pool reserves и т.п.', verbose_name='Доп. данные')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('base_asset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prices_l1_base', to='app_market.exchangeasset', verbose_name='Базовый актив')),
                ('provider', models.ForeignKey(help_text='Связь на Exchange (ПЛ).', on_delete=django.db.models.deletion.PROTECT, related_name='prices_l1', to='app_market.exchange', verbose_name='Поставщик ликвидности')),
                ('quote_asset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prices_l1_quote', to='app_market.exchangeasset', verbose_name='Котируемый актив')),
            ],
            options={
                'verbose_name': 'L1-котировка (bid/ask)',
                'verbose_name_plural': 'L1-котировки (bid/ask)',
                'db_table': 'market_price_l1',
            },
        ),
        migrations.CreateModel(
            name='CurrencyMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_symbol', models.CharField(db_index=True, max_length=128, verbose_name='raw_symbol')),
                ('raw_chain', models.CharField(blank=True, max_length=128, null=True, verbose_name='raw_chain')),
                ('raw_pair', models.CharField(blank=True, max_length=128, null=True, verbose_name='raw_pair')),
                ('match_kind', models.CharField(choices=[('EXACT', 'Exact'), ('REGEX', 'Regex'), ('SPLIT', 'Split'), ('CUSTOM', 'Custom')], db_index=True, default='EXACT', max_length=10)),
                ('priority', models.IntegerField(db_index=True, default=0, verbose_name='Приоритет')),
                ('pattern', models.CharField(blank=True, default='', max_length=256, verbose_name='pattern/regex')),
                ('asset_group_idx', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='asset group index')),
                ('chain_group_idx', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='chain group index')),
                ('split_delimiters', models.CharField(blank=True, default='', max_length=16, verbose_name='split delimiters (e.g. -/\\)')),
                ('left_is_asset', models.BooleanField(default=True, verbose_name='Левая часть — это asset (для SPLIT)')),
                ('norm_asset_code', models.CharField(max_length=32, verbose_name='asset_code (norm)')),
                ('norm_chain_code', models.CharField(max_length=64, verbose_name='chain_code (norm)')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Активно')),
                ('note', models.CharField(blank=True, default='', max_length=255, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='currency_maps', to='app_market.exchange', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'Маппинг обозначений валют',
                'verbose_name_plural': 'Маппинги обозначений валют',
                'ordering': ['exchange', '-priority', 'raw_symbol'],
                'indexes': [models.Index(fields=['exchange', 'raw_symbol'], name='app_market__exchang_1eac41_idx'), models.Index(fields=['exchange', 'is_active', '-priority'], name='app_market__exchang_207bb8_idx')],
            },
        ),
        migrations.CreateModel(
            name='ExchangeApiKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(default='default', help_text='Например: main, trading, withdraw-only и т.п.', max_length=64, verbose_name='Метка ключей')),
                ('api_key', encrypted_model_fields.fields.EncryptedCharField(blank=True, null=True, verbose_name='API Key')),
                ('api_secret', encrypted_model_fields.fields.EncryptedCharField(blank=True, null=True, verbose_name='API Secret')),
                ('api_passphrase', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Требуется не всегда', null=True, verbose_name='API Passphrase')),
                ('api_broker', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Требуется не всегда', null=True, verbose_name='Broker key')),
                ('api_key_view', models.CharField(blank=True, default='', editable=False, max_length=272, verbose_name='API Key (вид)')),
                ('api_secret_view', models.CharField(blank=True, default='', editable=False, max_length=272, verbose_name='API Secret (вид)')),
                ('api_passphrase_view', models.CharField(blank=True, default='', editable=False, max_length=272, verbose_name='API Passphrase (вид)')),
                ('api_broker_view', models.CharField(blank=True, default='', editable=False, max_length=272, verbose_name='Broker key (вид)')),
                ('is_enabled', models.BooleanField(db_index=True, default=True, verbose_name='Включён')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to='app_market.exchange', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'API ключи ПЛ',
                'verbose_name_plural': 'API ключи ПЛ',
                'ordering': ['exchange', 'label'],
                'constraints': [models.UniqueConstraint(fields=('exchange', 'label'), name='uniq_exchange_apikey_label')],
            },
        ),
        migrations.AddIndex(
            model_name='exchangeasset',
            index=models.Index(fields=['exchange', 'asset_code'], name='app_market__exchang_2c700c_idx'),
        ),
        migrations.AddIndex(
            model_name='exchangeasset',
            index=models.Index(fields=['exchange', 'chain_code'], name='app_market__exchang_99765a_idx'),
        ),
        migrations.AddIndex(
            model_name='exchangeasset',
            index=models.Index(fields=['-updated_at'], name='app_market__updated_4535d3_idx'),
        ),
        migrations.AddConstraint(
            model_name='exchangeasset',
            constraint=models.UniqueConstraint(fields=('exchange', 'asset_code', 'chain_code'), name='uniq_exchange_asset_chain'),
        ),
        migrations.AddIndex(
            model_name='exchangeavailabilitylog',
            index=models.Index(fields=['exchange', '-created_at'], name='app_market__exchang_1056b2_idx'),
        ),
        migrations.AddIndex(
            model_name='pricel1',
            index=models.Index(fields=['provider', 'base_asset', 'quote_asset', '-ts_src'], name='idx_price_l1_src'),
        ),
        migrations.AddIndex(
            model_name='pricel1',
            index=models.Index(fields=['venue_type', 'base_asset', 'quote_asset', '-ts_src'], name='idx_price_l1_venue'),
        ),
        migrations.AddIndex(
            model_name='pricel1',
            index=models.Index(fields=['status', '-ts_ingest'], name='idx_price_l1_status'),
        ),
        migrations.AddConstraint(
            model_name='pricel1',
            constraint=models.CheckConstraint(condition=models.Q(('ask__gte', models.F('bid'))), name='price_l1_ask_ge_bid'),
        ),
        migrations.AddConstraint(
            model_name='pricel1',
            constraint=models.CheckConstraint(condition=models.Q(('bid__gte', 0), ('ask__gte', 0)), name='price_l1_non_negative'),
        ),
    ]
