# app_main/utils/audit.py
from __future__ import annotations

import hashlib
from dataclasses import dataclass
from typing import Any, Dict, List, Tuple

from django.utils import timezone

# –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–∞—Å–∫–∏—Ä—É–µ–º (—Å–µ–∫—Ä–µ—Ç—ã)
MASK_FIELDS = {
    "email_host_password",
    "telegram_bot_token",
}

# –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–µ—à–∏—Ä—É–µ–º –≤–º–µ—Å—Ç–æ –≤—ã–≤–æ–¥–∞ ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ/—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ)
HASH_FIELDS = {
    "robots_txt",
    "head_inject_html",
}

# –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤ –¥–∏—Ñ—Ñ–µ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ/–∞–≤—Ç–æ-–ø–æ–ª—è)
IGNORED_FIELDS = {
    "updated_at",
    "singleton",
}

# –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–æ–ª—è (–∫—Ä–∞—Å–Ω—ã–π –∑–Ω–∞—á–æ–∫)
CRITICAL_FIELDS = {
    "fee_percent",
    "admin_path",
    "block_indexing",
    "maintenance_mode",
    "use_https_in_meta",
    "ref_attribution_window_days",
}

# –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è (–æ—Ä–∞–Ω–∂–µ–≤—ã–π –∑–Ω–∞—á–æ–∫)
IMPORTANT_FIELDS = {
    "email_host",
    "email_port",
    "email_host_user",
    "email_use_tls",
    "email_use_ssl",
    "email_from",
    "telegram_chat_id",
    "hreflang_enabled",
    "jsonld_enabled",
}

# –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî info


def _as_str(v: Any) -> str:
    if v is None:
        return ""
    try:
        return str(v)
    except Exception:
        return repr(v)


def _mask_secret(v: Any) -> str:
    s = _as_str(v)
    if not s:
        return ""
    tail = s[-4:] if len(s) > 4 else s
    return f"***{tail}"


def _hash_text(v: Any) -> str:
    s = _as_str(v)
    h = hashlib.sha1(s.encode("utf-8")).hexdigest()[:8]
    return f"hash:{h}"


def diff_sitesetup(old: Any, new: Any, labels: Dict[str, str]) -> List[Tuple[str, str, str]]:
    """
    –í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ (field, old_str, new_str) —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª–µ–π.
    labels ‚Äî –∫–∞—Ä—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è (verbose_name).
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è (—Å–º. IGNORED_FIELDS).
    """
    changed: List[Tuple[str, str, str]] = []

    # —Å—Ä–∞–≤–Ω–∏–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ model fields, –∏—Å–∫–ª—é—á–∞—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ
    field_names = [f.name for f in new._meta.fields if f.name not in IGNORED_FIELDS]

    for name in field_names:
        old_val = getattr(old, name, None) if old else None
        new_val = getattr(new, name, None)

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∞–π–ª—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
        if hasattr(old_val, "name"):
            old_val = old_val.name
        if hasattr(new_val, "name"):
            new_val = new_val.name

        if old is None:
            # —Å–æ–∑–¥–∞–Ω–∏–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (singleton —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
            continue

        if old_val == new_val:
            continue

        # –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞/—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        if name in MASK_FIELDS:
            old_s = _mask_secret(old_val)
            new_s = _mask_secret(new_val)
        elif name in HASH_FIELDS:
            old_s = _hash_text(old_val)
            new_s = _hash_text(new_val)
        else:
            old_s = _as_str(old_val)
            new_s = _as_str(new_val)

        # –∫–æ—Ä–æ—Ç–∫–∞—è ¬´–∫–æ—Å–º–µ—Ç–∏–∫–∞¬ª –¥–ª—è –ø—É—Å—Ç—ã—Ö
        old_s = old_s if old_s != "" else "‚Äî"
        new_s = new_s if new_s != "" else "‚Äî"

        changed.append((name, old_s, new_s))

    return changed


def severity_for_fields(names: List[str]) -> str:
    """
    –í–µ—Ä–Ω—ë—Ç 'critical' / 'important' / 'info', –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∞–±–æ—Ä–∞ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª–µ–π.
    """
    name_set = set(names)
    if name_set & CRITICAL_FIELDS:
        return "critical"
    if name_set & IMPORTANT_FIELDS:
        return "important"
    return "info"


def headline_emoji(level: str) -> str:
    return {
        "critical": "üî¥",
        "important": "üü†",
        "info": "üîµ",
    }.get(level, "üîµ")


def format_telegram_message(user_email: str, ip: str, ua: str, changes: List[Tuple[str, str, str]], labels: Dict[str, str]) -> Tuple[str, str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç (level, message_html) –¥–ª—è Telegram.
    """
    names = [n for n, _, _ in changes]
    level = severity_for_fields(names)
    icon = headline_emoji(level)
    ts = timezone.now().strftime("%Y-%m-%d %H:%M:%S %z")

    # –°–æ–±–µ—Ä—ë–º —Ç–µ–ª–æ
    lines = []
    for name, old_s, new_s in changes:
        label = labels.get(name, name)
        # –ª—ë–≥–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        if len(old_s) > 120:
            old_s = old_s[:117] + "‚Ä¶"
        if len(new_s) > 120:
            new_s = new_s[:117] + "‚Ä¶"
        lines.append(f"<b>{label}</b>: <code>{old_s}</code> ‚Üí <code>{new_s}</code>")

    info = (
        f"{icon} <b>SiteSetup –∏–∑–º–µ–Ω—ë–Ω</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_email or 'unknown'}</code>\n"
        f"IP: <code>{ip or '-'}</code>\n"
        f"UA: <code>{(ua or '-')[:160]}</code>\n"
        f"–í—Ä–µ–º—è: <code>{ts}</code>\n\n"
        + "\n".join(lines)
    )
    return level, info
